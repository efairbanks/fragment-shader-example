// FRAGEMENT SHADER

// specify version
//#version 400

// output color for this fragment (pixel)
out vec4 FragColor;
uniform vec2 resolution;
uniform float time;

vec3 look(vec3 o, vec3 t, vec2 p){
vec3 ray = normalize(t-o);
vec3 right = normalize(cross(ray,vec3(0.,1.,0.)));
vec3 up = normalize(cross(ray,right));
right=normalize(cross(ray,up));
return normalize(ray+right*p.x+up*p.y);
}
vec2 sphere(vec3 p, float r, float m){return vec2(length(p)-r,m);}
vec2 _sub(vec2 a, vec2 b){return -a.x>b.x?vec2(-a.x,a.y):b;}
vec2 map(vec3 p){
for(int i=0;i<4;i++) {
p=abs(p);
p-= .1;
}
return sphere(p,.2,0.);
}
vec2 march(vec3 o, vec3 r){
float d=1.;
for(float i=0.;i<100.;i++){
vec2 result=map(o+r*d);
d+=result.x*.2;
if(result.x<.01) return vec2(i*.01,0.);
}
return vec2(1.,0.);
}
void main(void) {
vec2 p = (gl_FragCoord.xy / resolution.xy)-.5;
p*=2.;
p.x*=resolution.x/resolution.y;
vec3 camera=vec3(cos(time),1.,sin(time))*1.5;
vec3 ray=look(camera,vec3(0.),p);
float shade=1.-march(camera,ray).x;
gl_FragColor = vec4(vec3(shade), 1.0);
}

/*
void main()
{
  // assign vertex color to pixel color
    FragColor = vec4(gl_FragCoord.x/resolution.x, gl_FragCoord.y/resolution.y, 1.0, 1.0);
}*/

